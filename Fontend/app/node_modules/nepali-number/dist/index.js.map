{"version":3,"file":"index.js","sources":["../src/NepaliNumber.ts","../src/NepaliNumberHelpers.ts"],"sourcesContent":["class NepaliNumber {\n    private outputLocale: string = \"en\"\n    private numberString: string = \"\"\n    private supportedLocale: string[] = [\"en\", \"ne\"]\n    private supportedNumberType: string[] = [\"en-IN\", \"en-US\"]\n    private digitMapping: string[] = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"]\n\n    constructor(numberString?: number) {\n        if (numberString) {\n            this.setNumber(numberString)\n        }\n    }\n\n    public setOutputLocale(locale: string): NepaliNumber {\n        if (!this.supportedLocale.includes(locale)) {\n            throw new TypeError(\"Currently 'ne' and 'en' only supported as a `locale` parameter.\")\n        }\n\n        this.outputLocale = locale\n\n        return this\n    }\n\n    public setNumber(numberString: string | number): NepaliNumber {\n        this.numberString = `${numberString}`\n\n        return this\n    }\n\n    public toNepali(numberString?: string | number): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                // tslint:disable-next-line:radix\n                if (isNaN(parseInt(char))) {\n                    return char\n                }\n\n                return this.digitMapping[char] || char\n            })\n            .join(\"\")\n    }\n\n    public toEnglish(numberString?: string): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                const englishDigit = this.digitMapping.findIndex((digit): boolean => digit === char)\n\n                return englishDigit === -1 ? char : `${englishDigit}`\n            })\n            .join(\"\")\n    }\n\n    public formatNumber(type: string): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishNumber = parseFloat(this.toEnglish())\n        if (isNaN(englishNumber)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type).format(englishNumber)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n\n    public formatAmount(type: string, precision: number = 2): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishAmount = parseFloat(this.toEnglish())\n        if (isNaN(englishAmount)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type, {\n            maximumFractionDigits: precision,\n            minimumFractionDigits: precision,\n        }).format(englishAmount)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n}\n\nexport default NepaliNumber\n","import NepaliNumber from \"./NepaliNumber\"\n\nexport const englishToNepaliNumber = (numberString: string | number): string =>\n    new NepaliNumber().setNumber(numberString).toNepali()\n\nexport const nepaliToEnglishNumber = (numberString: string): string =>\n    new NepaliNumber().setNumber(numberString).toEnglish()\n\nexport const nepaliNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-IN\")\nexport const englishNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-US\")\n\nexport const nepaliAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-IN\", precision)\nexport const englishAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-US\", precision)\n"],"names":[],"mappings":"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"}