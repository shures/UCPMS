var NepaliNumber = /** @class */ (function () {
    function NepaliNumber(numberString) {
        this.outputLocale = "en";
        this.numberString = "";
        this.supportedLocale = ["en", "ne"];
        this.supportedNumberType = ["en-IN", "en-US"];
        this.digitMapping = ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"];
        if (numberString) {
            this.setNumber(numberString);
        }
    }
    NepaliNumber.prototype.setOutputLocale = function (locale) {
        if (!this.supportedLocale.includes(locale)) {
            throw new TypeError("Currently 'ne' and 'en' only supported as a `locale` parameter.");
        }
        this.outputLocale = locale;
        return this;
    };
    NepaliNumber.prototype.setNumber = function (numberString) {
        this.numberString = "" + numberString;
        return this;
    };
    NepaliNumber.prototype.toNepali = function (numberString) {
        var _this = this;
        numberString = numberString || this.numberString;
        if (!numberString) {
            return "";
        }
        return numberString
            .toString()
            .split("")
            .map(function (char) {
            // tslint:disable-next-line:radix
            if (isNaN(parseInt(char))) {
                return char;
            }
            return _this.digitMapping[char] || char;
        })
            .join("");
    };
    NepaliNumber.prototype.toEnglish = function (numberString) {
        var _this = this;
        numberString = numberString || this.numberString;
        if (!numberString) {
            return "";
        }
        return numberString
            .toString()
            .split("")
            .map(function (char) {
            var englishDigit = _this.digitMapping.findIndex(function (digit) { return digit === char; });
            return englishDigit === -1 ? char : "" + englishDigit;
        })
            .join("");
    };
    NepaliNumber.prototype.formatNumber = function (type) {
        if (!this.supportedNumberType.includes(type)) {
            throw new TypeError("Currently 'en-US' and 'en-IN' only supported as a `type` parameter.");
        }
        // tslint:disable-next-line:radix
        var englishNumber = parseFloat(this.toEnglish());
        if (isNaN(englishNumber)) {
            return this.numberString;
        }
        var formatted = new Intl.NumberFormat(type).format(englishNumber);
        return this.outputLocale === "en" ? this.toEnglish(formatted) : this.toNepali(formatted);
    };
    NepaliNumber.prototype.formatAmount = function (type, precision) {
        if (precision === void 0) { precision = 2; }
        if (!this.supportedNumberType.includes(type)) {
            throw new TypeError("Currently 'en-US' and 'en-IN' only supported as a `type` parameter.");
        }
        // tslint:disable-next-line:radix
        var englishAmount = parseFloat(this.toEnglish());
        if (isNaN(englishAmount)) {
            return this.numberString;
        }
        var formatted = new Intl.NumberFormat(type, {
            maximumFractionDigits: precision,
            minimumFractionDigits: precision,
        }).format(englishAmount);
        return this.outputLocale === "en" ? this.toEnglish(formatted) : this.toNepali(formatted);
    };
    return NepaliNumber;
}());

var englishToNepaliNumber = function (numberString) {
    return new NepaliNumber().setNumber(numberString).toNepali();
};
var nepaliToEnglishNumber = function (numberString) {
    return new NepaliNumber().setNumber(numberString).toEnglish();
};
var nepaliNumberFormat = function (numberString, locale) {
    if (locale === void 0) { locale = "en"; }
    return new NepaliNumber()
        .setOutputLocale(locale)
        .setNumber(numberString)
        .formatNumber("en-IN");
};
var englishNumberFormat = function (numberString, locale) {
    if (locale === void 0) { locale = "en"; }
    return new NepaliNumber()
        .setOutputLocale(locale)
        .setNumber(numberString)
        .formatNumber("en-US");
};
var nepaliAmountFormat = function (numberString, precision, locale) {
    if (precision === void 0) { precision = 2; }
    if (locale === void 0) { locale = "en"; }
    return new NepaliNumber()
        .setOutputLocale(locale)
        .setNumber(numberString)
        .formatAmount("en-IN", precision);
};
var englishAmountFormat = function (numberString, precision, locale) {
    if (precision === void 0) { precision = 2; }
    if (locale === void 0) { locale = "en"; }
    return new NepaliNumber()
        .setOutputLocale(locale)
        .setNumber(numberString)
        .formatAmount("en-US", precision);
};

export { englishAmountFormat, englishNumberFormat, englishToNepaliNumber, nepaliAmountFormat, nepaliNumberFormat, nepaliToEnglishNumber };
//# sourceMappingURL=index.es.js.map
