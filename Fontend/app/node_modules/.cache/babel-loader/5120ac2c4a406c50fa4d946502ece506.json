{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar Language;\n\n(function (Language) {\n  Language[\"np\"] = \"np\";\n  Language[\"en\"] = \"en\";\n})(Language || (Language = {}));\n/**\r\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\r\n */\n\n\nvar yearMonthDaysMapping = [[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30], [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]];\n/**\r\n * Memoizing the days passed for each month in year for faster calculation\r\n */\n\nvar monthDaysMappings = yearMonthDaysMapping.map(function (yearMappings) {\n  var daySum = 0;\n  return yearMappings.map(function (monthDays) {\n    var monthPassedDays = [monthDays, daySum];\n    daySum += monthDays;\n    return monthPassedDays;\n  });\n}, []);\n/**\r\n * Ignore\r\n */\n\nvar daysPassed = 0;\n/**\r\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\r\n */\n\nvar yearDaysMapping = yearMonthDaysMapping.map(function (yearMappings) {\n  var daysInYear = yearMappings.reduce(function (acc, x) {\n    return acc + x;\n  }, 0);\n  var yearDaysPassed = [daysInYear, daysPassed];\n  daysPassed += daysInYear;\n  return yearDaysPassed;\n});\n/**\r\n * Max possible Day\r\n */\n\nvar MAX_DAY = 33238;\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.');\n}\n/**\r\n * Min possible Day\r\n */\n\n\nvar MIN_DAY = 1;\n/**\r\n * @ignore\r\n */\n\nfunction getYearIndex(year) {\n  return year - EPOCH_YEAR;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction getYearFromIndex(yearIndex) {\n  return yearIndex + EPOCH_YEAR;\n}\n/**\r\n * @ignore\r\n */\n\n\nvar EPOCH_YEAR = 2000;\n/**\r\n * @ignore\r\n */\n\nvar COMPLETED_DAYS = 1;\n/**\r\n * @ignore\r\n */\n\nvar TOTAL_DAYS = 0;\n/**\r\n * @ignore\r\n */\n\nfunction mod(m, val) {\n  while (val < 0) {\n    val += m;\n  }\n\n  return val % m;\n}\n/**\r\n * Format Object\r\n */\n\n\nvar formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: ['Baisakh', 'Jestha', 'Asar', 'Shrawan', 'Bhadra', 'Aswin', 'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra']\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: ['बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन', 'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुण', 'चैत्र']\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n};\n/**\r\n * Epoch in english date\r\n */\n\nvar beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n};\n/**\r\n * `findPassedDays` calculates the days passed from the epoch time.\r\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\r\n * @param year Year between 2000-2009 of nepali date\r\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\r\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\r\n * @returns Number of days passed since epoch time from the given date,month and year.\r\n */\n\nfunction findPassedDays(year, month, date) {\n  try {\n    var yearIndex = getYearIndex(year);\n    var pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS];\n    var extraMonth = mod(12, month);\n    var extraYear = Math.floor(month / 12);\n    var pastMonthDays = yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] - pastYearDays + monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS];\n    var daysPassed_1 = pastYearDays + pastMonthDays + date;\n\n    if (daysPassed_1 < MIN_DAY || daysPassed_1 > MAX_DAY) {\n      throw new Error();\n    }\n\n    return daysPassed_1;\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\n/**\r\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\r\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\r\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\r\n * @param daysPassed The number of days passed since nepali date epoch time\r\n * @returns date values in object implementing IYearMonthDate interface\r\n */\n\n\nfunction mapDaysToDate(daysPassed) {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(\"The epoch difference is not within the boundaries \" + MIN_DAY + \" - \" + MAX_DAY);\n  }\n\n  var yearIndex = yearDaysMapping.findIndex(function (year) {\n    return daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS];\n  });\n  var monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS];\n  var monthIndex = monthDaysMappings[yearIndex].findIndex(function (month) {\n    return monthRemainder > month[COMPLETED_DAYS] && monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS];\n  });\n  var date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS];\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  };\n}\n\nfunction findPassedDaysAD(year, month, date) {\n  var timeDiff = Math.abs(Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date));\n  var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n  return diffDays;\n}\n\nfunction mapDaysToDateAD(daysPassed) {\n  var mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed));\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  };\n}\n\nfunction convertToAD(bsDateObject) {\n  try {\n    var daysPassed_2 = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date);\n    var BS = mapDaysToDate(daysPassed_2);\n    var AD = mapDaysToDateAD(daysPassed_2);\n    return {\n      AD: AD,\n      BS: __assign(__assign({}, BS), {\n        day: AD.day\n      })\n    };\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\n\nfunction convertToBS(adDateObject) {\n  try {\n    var daysPassed_3 = findPassedDaysAD(adDateObject.getFullYear(), adDateObject.getMonth(), adDateObject.getDate());\n    var BS = mapDaysToDate(daysPassed_3);\n    var AD = mapDaysToDateAD(daysPassed_3);\n    return {\n      AD: AD,\n      BS: __assign(__assign({}, BS), {\n        day: AD.day\n      })\n    };\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\n\nfunction mapLanguageNumber(dateNumber, language) {\n  return dateNumber.split('').map(function (num) {\n    return formatObj[language].date[parseInt(num, 10)];\n  }).join('');\n}\n\nfunction format(bsDate, stringFormat, language) {\n  return stringFormat.replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, function (match, _, matchedString) {\n    var _a;\n\n    switch (match) {\n      case 'D':\n        return mapLanguageNumber(bsDate.date.toString(), language);\n\n      case 'DD':\n        return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language);\n\n      case 'M':\n        return mapLanguageNumber((bsDate.month + 1).toString(), language);\n\n      case 'MM':\n        return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language);\n\n      case 'MMM':\n        return formatObj[language].month.short[bsDate.month];\n\n      case 'MMMM':\n        return formatObj[language].month.long[bsDate.month];\n\n      case 'YY':\n        return mapLanguageNumber(bsDate.year.toString().slice(-2), language);\n\n      case 'YYY':\n        return mapLanguageNumber(bsDate.year.toString().slice(-3), language);\n\n      case 'YYYY':\n        return mapLanguageNumber(bsDate.year.toString(), language);\n\n      case 'd':\n        return mapLanguageNumber(((_a = bsDate.day) === null || _a === void 0 ? void 0 : _a.toString()) || '0', language);\n\n      case 'dd':\n        return formatObj[language].day.short[bsDate.day || 0];\n\n      case 'ddd':\n        return formatObj[language].day.long[bsDate.day || 0];\n\n      default:\n        return matchedString.replace('/', '');\n    }\n  }).replace(/\\\\/g, '');\n}\n\nfunction parse(dateString) {\n  var OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/;\n  var GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/;\n  var match;\n  match = dateString.match(OFFICIAL_FORMAT);\n\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    };\n  }\n\n  match = dateString.match(GEORGIAN_FORMAT);\n\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    };\n  }\n\n  throw new Error('Invalid date format');\n}\n\nvar dateSymbol = Symbol('Date');\nvar daySymbol = Symbol('Day');\nvar yearSymbol = Symbol('Year');\nvar monthSymbol = Symbol('MonthIndex');\nvar jsDateSymbol = Symbol('JsDate');\nvar convertToBSMethod = Symbol('convertToBS()');\nvar convertToADMethod = Symbol('convertToAD()');\nvar setAdBs = Symbol('setADBS()');\nvar setDayYearMonth = Symbol('setDayYearMonth()');\n\nvar NepaliDate = function () {\n  function NepaliDate() {\n    var constructorError = new Error('Invalid constructor arguments');\n\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date());\n    } else if (arguments.length === 1) {\n      var argument = arguments[0];\n\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument));\n          break;\n\n        case 'string':\n          var _a = parse(argument),\n              date = _a.date,\n              year = _a.year,\n              month = _a.month;\n\n          this[setDayYearMonth](year, month, date);\n          this[convertToADMethod]();\n          break;\n\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument);\n          } else {\n            throw constructorError;\n          }\n\n          break;\n\n        default:\n          throw constructorError;\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2]);\n      this[convertToADMethod]();\n    } else {\n      throw constructorError;\n    }\n  }\n\n  NepaliDate.prototype[setDayYearMonth] = function (year, month, date, day) {\n    if (month === void 0) {\n      month = 0;\n    }\n\n    if (date === void 0) {\n      date = 1;\n    }\n\n    if (day === void 0) {\n      day = 0;\n    }\n\n    this[yearSymbol] = year;\n    this[monthSymbol] = month;\n    this[dateSymbol] = date;\n    this[daySymbol] = day;\n  };\n  /**\r\n   * Returns Javascript Date converted from nepali date.\r\n   */\n\n\n  NepaliDate.prototype.toJsDate = function () {\n    return this[jsDateSymbol];\n  };\n  /**\r\n   * Get Nepali date for the month\r\n   */\n\n\n  NepaliDate.prototype.getDate = function () {\n    return this[dateSymbol];\n  };\n  /**\r\n   * Get Nepali date year.\r\n   */\n\n\n  NepaliDate.prototype.getYear = function () {\n    return this[yearSymbol];\n  };\n  /**\r\n   * Get Week day index for the date.\r\n   */\n\n\n  NepaliDate.prototype.getDay = function () {\n    return this[daySymbol];\n  };\n  /**\r\n   * Get Nepali month index.\r\n   *\r\n   * ```\r\n   * Baisakh => 0\r\n   * Jestha => 1\r\n   * Asar => 2\r\n   * Shrawan => 3\r\n   * Bhadra => 4\r\n   * Aswin => 5\r\n   * Kartik => 6\r\n   * Mangsir => 7\r\n   * Poush => 8\r\n   * Magh => 9\r\n   * Falgun => 10\r\n   * Chaitra => 11\r\n   * ```\r\n   */\n\n\n  NepaliDate.prototype.getMonth = function () {\n    return this[monthSymbol];\n  };\n  /**\r\n   * Returns an object with AD and BS object implementing IYearMonthDate\r\n   *\r\n   * Example:\r\n   *\r\n   * ```js\r\n   * {\r\n   *     BS: {\r\n   *         year: 2052,\r\n   *         month: 10,\r\n   *         date: 10,\r\n   *         day: 0\r\n   *     },\r\n   *     AD: {\r\n   *         year: 2019,\r\n   *         month: 10,\r\n   *         date: 10,\r\n   *         day: 0\r\n   *     },\r\n   *\r\n   * }\r\n   * ```\r\n   */\n\n\n  NepaliDate.prototype.getDateObject = function () {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    };\n  };\n  /**\r\n   * Returns Nepali date fields in an object implementing IYearMonthDate\r\n   *\r\n   * ```js\r\n   * {\r\n   *     year: 2052,\r\n   *     month: 10,\r\n   *     date: 10,\r\n   *     day: 0\r\n   * }\r\n   * ```\r\n   */\n\n\n  NepaliDate.prototype.getBS = function () {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    };\n  };\n  /**\r\n   * Returns AD date fields in an object implementing IYearMonthDate\r\n   *\r\n   * ```js\r\n   * {\r\n   *     year: 2019,\r\n   *     month: 10,\r\n   *     date: 10,\r\n   *     day: 0\r\n   * }\r\n   * ```\r\n   */\n\n\n  NepaliDate.prototype.getAD = function () {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    };\n  };\n  /**\r\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\r\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\r\n   * It is similar to javascript Date API.\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\r\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\r\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\r\n   * ```\r\n   * @param date positive or negative integer value to set date\r\n   */\n\n\n  NepaliDate.prototype.setDate = function (date) {\n    var oldDate = this[dateSymbol];\n\n    try {\n      this[dateSymbol] = date;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[dateSymbol] = oldDate;\n      throw e;\n    }\n  };\n  /**\r\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\r\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\r\n   * It is similar to javascript Date API.\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\r\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\r\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\r\n   * ```\r\n   * @param date positive or negative integer value to set month\r\n   */\n\n\n  NepaliDate.prototype.setMonth = function (month) {\n    var oldMonth = this[monthSymbol];\n\n    try {\n      this[monthSymbol] = month;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[monthSymbol] = oldMonth;\n      throw e;\n    }\n  };\n  /**\r\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\r\n   * ```\r\n   * @param date positive integer value to set year\r\n   */\n\n\n  NepaliDate.prototype.setYear = function (year) {\n    var oldYear = this[yearSymbol];\n\n    try {\n      this[yearSymbol] = year;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[yearSymbol] = oldYear;\n      throw e;\n    }\n  };\n  /**\r\n   * Format Nepali date string based on format string.\r\n   * ```\r\n   * YYYY - 4 digit of year (2077)\r\n   * YYY  - 3 digit of year (077)\r\n   * YY   - 2 digit of year (77)\r\n   * M    - month number (1 - 12)\r\n   * MM   - month number with 0 padding (01 - 12)\r\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\r\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\r\n   * D    - Day of Month (1, 2, ... 31, 32)\r\n   * DD   - Day of Month with zero padding (01, 02, ...)\r\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\r\n   * dd   - Week day in short format (Sun, Mon, ..)\r\n   * ddd  - Week day in long format (Sunday, Monday, ...)\r\n   * ```\r\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.format('YYYY/MM/DD') // '2054/11/10'\r\n   * a.format('YYYY MM DD') // '2054 11 10'\r\n   * a.format('YYYY') // '2054'\r\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\r\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\r\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\r\n   * a.format('dd', 'np') // 'आइतबार'\r\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\r\n   * // Set static variable to 'np' for default Nepali language\r\n   * NepaliDate.language = 'np'\r\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\r\n   * ```\r\n   * @param formatString\r\n   * @param language en | np\r\n   */\n\n\n  NepaliDate.prototype.format = function (formatString, language) {\n    if (language === void 0) {\n      language = NepaliDate.language;\n    }\n\n    return format(this.getBS(), formatString, language);\n  };\n  /**\r\n   * Returns new Nepali Date from the string date format\r\n   * Similar to calling constructor with string parameter\r\n   * @param dateString\r\n   */\n\n\n  NepaliDate.parse = function (dateString) {\n    var _a = parse(dateString),\n        date = _a.date,\n        year = _a.year,\n        month = _a.month;\n\n    return new NepaliDate(year, month, date);\n  };\n  /**\r\n   * Returns new Nepali Date converted form current day date.\r\n   * Similar to calling empty constructor\r\n   */\n\n\n  NepaliDate.now = function () {\n    return new NepaliDate();\n  };\n  /**\r\n   * Returns new converted Nepali Date from the provided Javascript Date.\r\n   * It is similar to passing string as constructor\r\n   * @param date\r\n   */\n\n\n  NepaliDate.fromAD = function (date) {\n    return new NepaliDate(date);\n  };\n\n  NepaliDate.prototype[convertToBSMethod] = function (date) {\n    var _a = convertToBS(date),\n        AD = _a.AD,\n        BS = _a.BS;\n\n    this[setAdBs](AD, BS);\n  };\n\n  NepaliDate.prototype[setAdBs] = function (AD, BS) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day);\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date);\n  };\n\n  NepaliDate.prototype[convertToADMethod] = function () {\n    var _a = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    }),\n        AD = _a.AD,\n        BS = _a.BS;\n\n    this[setAdBs](AD, BS);\n  };\n\n  NepaliDate.prototype.valueOf = function () {\n    return this[jsDateSymbol].getTime();\n  };\n\n  NepaliDate.prototype.toString = function () {\n    return this.format('ddd DD, MMMM YYYY');\n  };\n  /**\r\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\r\n   */\n\n\n  NepaliDate.language = Language.en;\n  return NepaliDate;\n}();\n\nexport default NepaliDate;","map":{"version":3,"sources":["../src/nepali-date-helper.ts","../src/nepali-date-converter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAClB,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACD,CAHD,EAAY,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAApB;;;;;;AAmBA,IAAM,oBAAoB,GAAe,CACvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CADuC,EAEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAFuC,EAGvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAHuC,EAIvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAJuC,EAKvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CALuC,EAMvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CANuC,EAOvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAPuC,EAQvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CARuC,EASvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CATuC,EAUvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAVuC,EAWvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAXuC,EAYvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAZuC,EAavC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAbuC,EAcvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAduC,EAevC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAfuC,EAgBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAhBuC,EAiBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAjBuC,EAkBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAlBuC,EAmBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAnBuC,EAoBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CApBuC,EAqBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CArBuC,EAsBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAtBuC,EAuBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAvBuC,EAwBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAxBuC,EAyBvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAzBuC,EA0BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA1BuC,EA2BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA3BuC,EA4BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA5BuC,EA6BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA7BuC,EA8BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA9BuC,EA+BvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA/BuC,EAgCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAhCuC,EAiCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAjCuC,EAkCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAlCuC,EAmCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAnCuC,EAoCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CApCuC,EAqCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CArCuC,EAsCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAtCuC,EAuCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAvCuC,EAwCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAxCuC,EAyCvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAzCuC,EA0CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA1CuC,EA2CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA3CuC,EA4CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA5CuC,EA6CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA7CuC,EA8CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA9CuC,EA+CvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA/CuC,EAgDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAhDuC,EAiDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAjDuC,EAkDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAlDuC,EAmDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAnDuC,EAoDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CApDuC,EAqDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CArDuC,EAsDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAtDuC,EAuDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAvDuC,EAwDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAxDuC,EAyDvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAzDuC,EA0DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA1DuC,EA2DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA3DuC,EA4DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA5DuC,EA6DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA7DuC,EA8DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA9DuC,EA+DvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA/DuC,EAgEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAhEuC,EAiEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAjEuC,EAkEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAlEuC,EAmEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAnEuC,EAoEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CApEuC,EAqEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CArEuC,EAsEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAtEuC,EAuEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAvEuC,EAwEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAxEuC,EAyEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAzEuC,EA0EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA1EuC,EA2EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA3EuC,EA4EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA5EuC,EA6EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA7EuC,EA8EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA9EuC,EA+EvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA/EuC,EAgFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAhFuC,EAiFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAjFuC,EAkFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAlFuC,EAmFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAnFuC,EAoFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CApFuC,EAqFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CArFuC,EAsFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAtFuC,EAuFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAvFuC,EAwFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAxFuC,EAyFvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAzFuC,EA0FvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA1FuC,EA2FvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CA3FuC,CAAzC;;;;;AAiGA,IAAM,iBAAiB,GAAiB,oBAAoB,CAAC,GAArB,CAAyB,UAAC,YAAD,EAAuB;AACtF,MAAI,MAAM,GAAG,CAAb;AACA,SAAO,YAAY,CAAC,GAAb,CAAiB,UAAC,SAAD,EAAkB;AACxC,QAAM,eAAe,GAAG,CAAC,SAAD,EAAY,MAAZ,CAAxB;AACA,IAAA,MAAM,IAAI,SAAV;AACA,WAAO,eAAP;AACD,GAJM,CAAP;AAKD,CAPuC,EAOrC,EAPqC,CAAxC;;;;;AAYA,IAAI,UAAU,GAAG,CAAjB;;;;;AAIA,IAAM,eAAe,GAAe,oBAAoB,CAAC,GAArB,CAAyB,UAAC,YAAD,EAAuB;AAClF,MAAM,UAAU,GAAG,YAAY,CAAC,MAAb,CAAoB,UAAC,GAAD,EAAM,CAAN,EAAO;AAAK,WAAA,GAAG,GAAG,CAAN;AAAO,GAAvC,EAAyC,CAAzC,CAAnB;AACA,MAAM,cAAc,GAAG,CAAC,UAAD,EAAa,UAAb,CAAvB;AACA,EAAA,UAAU,IAAI,UAAd;AACA,SAAO,cAAP;AACD,CALmC,CAApC;;;;;AAUA,IAAM,OAAO,GAAG,KAAhB;;AAEA,IAAI,UAAU,KAAK,OAAnB,EAA4B;AAC1B,QAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACD;;;;;;AAKD,IAAM,OAAO,GAAG,CAAhB;;;;;AAIA,SAAgB,YAAhB,CAA6B,IAA7B,EAAyC;AACvC,SAAO,IAAI,GAAG,UAAd;AACD;;;;;;AAKD,SAAgB,gBAAhB,CAAiC,SAAjC,EAAkD;AAChD,SAAO,SAAS,GAAG,UAAnB;AACD;AAMD;;;;;AAGO,IAAM,UAAU,GAAG,IAAnB;;;;;AAIA,IAAM,cAAc,GAAG,CAAvB;;;;;AAIA,IAAM,UAAU,GAAG,CAAnB;;;;;AAKP,SAAS,GAAT,CAAa,CAAb,EAAwB,GAAxB,EAAmC;AACjC,SAAO,GAAG,GAAG,CAAb,EAAgB;AACd,IAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAO,GAAG,GAAG,CAAb;AACD;;;;;;AAIM,IAAM,SAAS,GAAG;AACvB,EAAA,EAAE,EAAE;AACF,IAAA,GAAG,EAAE;AACH,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CADJ;AAEH,MAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE;AAFH,KADH;AAKF,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CADF;AAEL,MAAA,IAAI,EAAE,CACJ,SADI,EAEJ,QAFI,EAGJ,MAHI,EAIJ,SAJI,EAKJ,QALI,EAMJ,OANI,EAOJ,QAPI,EAQJ,SARI,EASJ,OATI,EAUJ,MAVI,EAWJ,QAXI,EAYJ,SAZI;AAFD,KALL;AAsBF,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C;AAtBJ,GADmB;AAyBvB,EAAA,EAAE,EAAE;AACF,IAAA,GAAG,EAAE;AACH,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,OAAtC,EAA+C,KAA/C,CADJ;AAEH,MAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,QAAhC,EAA0C,SAA1C,EAAqD,UAArD,EAAiE,QAAjE;AAFH,KADH;AAKF,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,EAAkB,MAAlB,EAA0B,IAA1B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,CADF;AAEL,MAAA,IAAI,EAAE,CACJ,OADI,EAEJ,KAFI,EAGJ,MAHI,EAIJ,QAJI,EAKJ,OALI,EAMJ,QANI,EAOJ,SAPI,EAQJ,OARI,EASJ,KATI,EAUJ,KAVI,EAWJ,SAXI,EAYJ,OAZI;AAFD,KALL;AAsBF,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C;AAtBJ;AAzBmB,CAAlB;;;;;AAsDP,IAAM,YAAY,GAAG;AACnB,EAAA,IAAI,EAAE,IADa;AAEnB,EAAA,KAAK,EAAE,CAFY;AAGnB,EAAA,IAAI,EAAE,EAHa;AAInB,EAAA,GAAG,EAAE;AAJc,CAArB;;;;;;;;;;AAeA,SAAgB,cAAhB,CAA+B,IAA/B,EAA6C,KAA7C,EAA4D,IAA5D,EAAwE;AACtE,MAAI;AACF,QAAM,SAAS,GAAG,YAAY,CAAC,IAAD,CAA9B;AACA,QAAM,YAAY,GAAG,eAAe,CAAC,SAAD,CAAf,CAA2B,cAA3B,CAArB;AACA,QAAM,UAAU,GAAG,GAAG,CAAC,EAAD,EAAK,KAAL,CAAtB;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,EAAnB,CAAlB;AAEA,QAAM,aAAa,GACjB,eAAe,CAAC,SAAS,GAAG,SAAb,CAAf,CAAuC,cAAvC,IACA,YADA,GAEA,iBAAiB,CAAC,SAAS,GAAG,SAAb,CAAjB,CAAyC,UAAzC,EAAqD,cAArD,CAHF;AAKA,QAAM,YAAU,GAAG,YAAY,GAAG,aAAf,GAA+B,IAAlD;;AACA,QAAI,YAAU,GAAG,OAAb,IAAwB,YAAU,GAAG,OAAzC,EAAkD;AAChD,YAAM,IAAI,KAAJ,EAAN;AACD;;AACD,WAAO,YAAP;AACD,GAhBD,CAgBE,OAAA,EAAA,EAAM;AACN,UAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF;AAID;;;;;;;;;AAOA,SAAgB,aAAhB,CAA8B,UAA9B,EAAgD;AAC9C,MAAI,UAAU,GAAG,OAAb,IAAwB,UAAU,GAAG,OAAzC,EAAkD;AAChD,UAAM,IAAI,KAAJ,CAAU,uDAAqD,OAArD,GAA4D,KAA5D,GAAkE,OAA5E,CAAN;AACD;;AAED,MAAM,SAAS,GAAG,eAAe,CAAC,SAAhB,CAChB,UAAA,IAAA,EAAI;AACF,WAAA,UAAU,GAAG,IAAI,CAAC,cAAD,CAAjB,IAAqC,UAAU,IAAI,IAAI,CAAC,cAAD,CAAJ,GAAuB,IAAI,CAAC,UAAD,CAA9E;AAA0F,GAF5E,CAAlB;AAIA,MAAM,cAAc,GAAG,UAAU,GAAG,eAAe,CAAC,SAAD,CAAf,CAA2B,cAA3B,CAApC;AACA,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAD,CAAjB,CAA6B,SAA7B,CACjB,UAAA,KAAA,EAAK;AACH,WAAA,cAAc,GAAG,KAAK,CAAC,cAAD,CAAtB,IACA,cAAc,IAAI,KAAK,CAAC,cAAD,CAAL,GAAwB,KAAK,CAAC,UAAD,CAD/C;AAC2D,GAH5C,CAAnB;AAKA,MAAM,IAAI,GAAG,cAAc,GAAG,iBAAiB,CAAC,SAAD,CAAjB,CAA6B,UAA7B,EAAyC,cAAzC,CAA9B;AAEA,SAAO;AACL,IAAA,IAAI,EAAE,gBAAgB,CAAC,SAAD,CADjB;AAEL,IAAA,KAAK,EAAE,UAFF;AAGL,IAAA,IAAI,EAAE;AAHD,GAAP;AAKD;;AAED,SAAgB,gBAAhB,CAAiC,IAAjC,EAA+C,KAA/C,EAA8D,IAA9D,EAA0E;AACxE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CACf,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,KAAf,EAAsB,IAAtB,IAA8B,IAAI,CAAC,GAAL,CAAS,YAAY,CAAC,IAAtB,EAA4B,YAAY,CAAC,KAAzC,EAAgD,YAAY,CAAC,IAA7D,CADf,CAAjB;AAGA,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,QAAQ,IAAI,OAAO,IAAP,GAAc,EAAlB,CAAlB,CAAjB;AACA,SAAO,QAAP;AACD;;AAED,SAAgB,eAAhB,CAAgC,UAAhC,EAAkD;AAChD,MAAM,UAAU,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,KAAK,UAAvB,CAAT,CAAnB;AACA,SAAO;AACL,IAAA,IAAI,EAAE,UAAU,CAAC,cAAX,EADD;AAEL,IAAA,KAAK,EAAE,UAAU,CAAC,WAAX,EAFF;AAGL,IAAA,IAAI,EAAE,UAAU,CAAC,UAAX,EAHD;AAIL,IAAA,GAAG,EAAE,UAAU,CAAC,SAAX;AAJA,GAAP;AAMD;;AAED,SAAgB,WAAhB,CAA4B,YAA5B,EAAwD;AACtD,MAAI;AACF,QAAM,YAAU,GAAG,cAAc,CAAC,YAAY,CAAC,IAAd,EAAoB,YAAY,CAAC,KAAjC,EAAwC,YAAY,CAAC,IAArD,CAAjC;AACA,QAAM,EAAE,GAAG,aAAa,CAAC,YAAD,CAAxB;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,YAAD,CAA1B;AAEA,WAAO;AACL,MAAA,EAAE,EAAA,EADG;AAEL,MAAA,EAAE,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,EAAP,CAAA,EAAS;AAAE,QAAA,GAAG,EAAE,EAAE,CAAC;AAAV,OAAT;AAFG,KAAP;AAID,GATD,CASE,OAAA,EAAA,EAAM;AACN,UAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF;;AAED,SAAgB,WAAhB,CAA4B,YAA5B,EAA8C;AAC5C,MAAI;AACF,QAAM,YAAU,GAAG,gBAAgB,CACjC,YAAY,CAAC,WAAb,EADiC,EAEjC,YAAY,CAAC,QAAb,EAFiC,EAGjC,YAAY,CAAC,OAAb,EAHiC,CAAnC;AAKA,QAAM,EAAE,GAAG,aAAa,CAAC,YAAD,CAAxB;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,YAAD,CAA1B;AAEA,WAAO;AACL,MAAA,EAAE,EAAA,EADG;AAEL,MAAA,EAAE,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,EAAP,CAAA,EAAS;AAAE,QAAA,GAAG,EAAE,EAAE,CAAC;AAAV,OAAT;AAFG,KAAP;AAID,GAbD,CAaE,OAAA,EAAA,EAAM;AACN,UAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF;;AAED,SAAS,iBAAT,CAA2B,UAA3B,EAA+C,QAA/C,EAAoE;AAClE,SAAO,UAAU,CACd,KADI,CACE,EADF,EAEJ,GAFI,CAEA,UAAA,GAAA,EAAG;AAAI,WAAA,SAAS,CAAC,QAAD,CAAT,CAAoB,IAApB,CAAyB,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAjC,CAAA;AAA2C,GAFlD,EAGJ,IAHI,CAGC,EAHD,CAAP;AAID;;AAED,SAAgB,MAAhB,CACE,MADF,EAEE,YAFF,EAGE,QAHF,EAGuB;AAErB,SAAO,YAAY,CAChB,OADI,CACI,2CADJ,EACiD,UAAC,KAAD,EAAQ,CAAR,EAAW,aAAX,EAAwB;;;AAC5E,YAAQ,KAAR;AACE,WAAK,GAAL;AACE,eAAO,iBAAiB,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAD,EAAyB,QAAzB,CAAxB;;AACF,WAAK,IAAL;AACE,eAAO,iBAAiB,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,GAAuB,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAAD,EAA0C,QAA1C,CAAxB;;AACF,WAAK,GAAL;AACE,eAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,KAAP,GAAe,CAAhB,EAAmB,QAAnB,EAAD,EAAgC,QAAhC,CAAxB;;AACF,WAAK,IAAL;AACE,eAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,KAAP,GAAe,CAAhB,EAAmB,QAAnB,GAA8B,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAAD,EAAiD,QAAjD,CAAxB;;AACF,WAAK,KAAL;AACE,eAAO,SAAS,CAAC,QAAD,CAAT,CAAoB,KAApB,CAA0B,KAA1B,CAAgC,MAAM,CAAC,KAAvC,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,SAAS,CAAC,QAAD,CAAT,CAAoB,KAApB,CAA0B,IAA1B,CAA+B,MAAM,CAAC,KAAtC,CAAP;;AACF,WAAK,IAAL;AACE,eAAO,iBAAiB,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,GAAuB,KAAvB,CAA6B,CAAC,CAA9B,CAAD,EAAmC,QAAnC,CAAxB;;AACF,WAAK,KAAL;AACE,eAAO,iBAAiB,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,GAAuB,KAAvB,CAA6B,CAAC,CAA9B,CAAD,EAAmC,QAAnC,CAAxB;;AACF,WAAK,MAAL;AACE,eAAO,iBAAiB,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAD,EAAyB,QAAzB,CAAxB;;AACF,WAAK,GAAL;AACE,eAAO,iBAAiB,CAAC,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,GAAP,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,QAAF,EAAV,KAA0B,GAA3B,EAAgC,QAAhC,CAAxB;;AACF,WAAK,IAAL;AACE,eAAO,SAAS,CAAC,QAAD,CAAT,CAAoB,GAApB,CAAwB,KAAxB,CAA8B,MAAM,CAAC,GAAP,IAAc,CAA5C,CAAP;;AACF,WAAK,KAAL;AACE,eAAO,SAAS,CAAC,QAAD,CAAT,CAAoB,GAApB,CAAwB,IAAxB,CAA6B,MAAM,CAAC,GAAP,IAAc,CAA3C,CAAP;;AACF;AACE,eAAO,aAAa,CAAC,OAAd,CAAsB,GAAtB,EAA2B,EAA3B,CAAP;AA1BJ;AA4BD,GA9BI,EA+BJ,OA/BI,CA+BI,KA/BJ,EA+BW,EA/BX,CAAP;AAgCD;;AAED,SAAgB,KAAhB,CAAsB,UAAtB,EAAwC;AACtC,MAAM,eAAe,GAAG,2DAAxB;AACA,MAAM,eAAe,GAAG,2DAAxB;AACA,MAAI,KAAJ;AACA,EAAA,KAAK,GAAG,UAAU,CAAC,KAAX,CAAiB,eAAjB,CAAR;;AACA,MAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO;AACL,MAAA,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADT;AAEL,MAAA,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAF3B;AAGL,MAAA,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX;AAHT,KAAP;AAKD;;AACD,EAAA,KAAK,GAAG,UAAU,CAAC,KAAX,CAAiB,eAAjB,CAAR;;AACA,MAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO;AACL,MAAA,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADT;AAEL,MAAA,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAF3B;AAGL,MAAA,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX;AAHT,KAAP;AAKD;;AACD,QAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AC5aD,IAAM,UAAU,GAAG,MAAM,CAAC,MAAD,CAAzB;AACA,IAAM,SAAS,GAAG,MAAM,CAAC,KAAD,CAAxB;AACA,IAAM,UAAU,GAAG,MAAM,CAAC,MAAD,CAAzB;AACA,IAAM,WAAW,GAAG,MAAM,CAAC,YAAD,CAA1B;AACA,IAAM,YAAY,GAAG,MAAM,CAAC,QAAD,CAA3B;AACA,IAAM,iBAAiB,GAAG,MAAM,CAAC,eAAD,CAAhC;AACA,IAAM,iBAAiB,GAAG,MAAM,CAAC,eAAD,CAAhC;AACA,IAAM,OAAO,GAAG,MAAM,CAAC,WAAD,CAAtB;AACA,IAAM,eAAe,GAAG,MAAM,CAAC,mBAAD,CAA9B;;AACA,IAAA,UAAA,GAAA,YAAA;AA8EE,WAAA,UAAA,GAAA;AACE,QAAM,gBAAgB,GAAG,IAAI,KAAJ,CAAU,+BAAV,CAAzB;;AACA,QAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAK,iBAAL,EAAwB,IAAI,IAAJ,EAAxB;AACD,KAFD,MAEO,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AACjC,UAAM,QAAQ,GAAG,SAAS,CAAC,CAAD,CAA1B;;AACA,cAAQ,OAAO,QAAf;AACE,aAAK,QAAL;AACE,eAAK,iBAAL,EAAwB,IAAI,IAAJ,CAAS,QAAT,CAAxB;AACA;;AACF,aAAK,QAAL;AACQ,cAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA;AAAA,cAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,cAAQ,IAAA,GAAA,EAAA,CAAA,IAAR;AAAA,cAAc,KAAA,GAAA,EAAA,CAAA,KAAd;;AACN,eAAK,eAAL,EAAsB,IAAtB,EAA4B,KAA5B,EAAmC,IAAnC;AACA,eAAK,iBAAL;AACA;;AACF,aAAK,QAAL;AACE,cAAI,QAAQ,YAAY,IAAxB,EAA8B;AAC5B,iBAAK,iBAAL,EAAwB,QAAxB;AACD,WAFD,MAEO;AACL,kBAAM,gBAAN;AACD;;AACD;;AACF;AACE,gBAAM,gBAAN;AAjBJ;AAmBD,KArBM,MAqBA,IAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AAChC,WAAK,eAAL,EAAsB,SAAS,CAAC,CAAD,CAA/B,EAAoC,SAAS,CAAC,CAAD,CAA7C,EAAkD,SAAS,CAAC,CAAD,CAA3D;AACA,WAAK,iBAAL;AACD,KAHM,MAGA;AACL,YAAM,gBAAN;AACD;AACF;;AAEO,EAAA,UAAA,CAAA,SAAA,CAAC,eAAD,IAAR,UAA0B,IAA1B,EAAwC,KAAxC,EAA2D,IAA3D,EAA6E,GAA7E,EAA4F;AAApD,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAiB;;AAAE,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,CAAA;AAAgB;;AAAE,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,GAAA,GAAA,CAAA;AAAe;;AAC1F,SAAK,UAAL,IAAmB,IAAnB;AACA,SAAK,WAAL,IAAoB,KAApB;AACA,SAAK,UAAL,IAAmB,IAAnB;AACA,SAAK,SAAL,IAAkB,GAAlB;AACD,GALO;;;;;;AAUR,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAL,CAAP;AACD,GAFD;;;;;;AAMA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAL,CAAP;AACD,GAFD;;;;;;AAMA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAL,CAAP;AACD,GAFD;;;;;;AAOA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAL,CAAP;AACD,GAFD;;;;;;;;;;;;;;;;;;;;;AAsBA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,WAAL,CAAP;AACD,GAFD;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,EAAE,EAAE,KAAK,KAAL,EADC;AAEL,MAAA,EAAE,EAAE,KAAK,KAAL;AAFC,KAAP;AAID,GALD;;;;;;;;;;;;;;;AAkBA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,IAAI,EAAE,KAAK,UAAL,CADD;AAEL,MAAA,KAAK,EAAE,KAAK,WAAL,CAFF;AAGL,MAAA,IAAI,EAAE,KAAK,UAAL,CAHD;AAIL,MAAA,GAAG,EAAE,KAAK,SAAL;AAJA,KAAP;AAMD,GAPD;;;;;;;;;;;;;;;AAoBA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,IAAI,EAAE,KAAK,YAAL,EAAmB,WAAnB,EADD;AAEL,MAAA,KAAK,EAAE,KAAK,YAAL,EAAmB,QAAnB,EAFF;AAGL,MAAA,IAAI,EAAE,KAAK,YAAL,EAAmB,OAAnB,EAHD;AAIL,MAAA,GAAG,EAAE,KAAK,YAAL,EAAmB,MAAnB;AAJA,KAAP;AAMD,GAPD;;;;;;;;;;;;;;;;;AAuBA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB;AAClB,QAAM,OAAO,GAAG,KAAK,UAAL,CAAhB;;AACA,QAAI;AACF,WAAK,UAAL,IAAmB,IAAnB;AACA,WAAK,iBAAL;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAK,UAAL,IAAmB,OAAnB;AACA,YAAM,CAAN;AACD;AACF,GATD;;;;;;;;;;;;;;;;;AAyBA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAsB;AACpB,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAjB;;AACA,QAAI;AACF,WAAK,WAAL,IAAoB,KAApB;AACA,WAAK,iBAAL;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAK,WAAL,IAAoB,QAApB;AACA,YAAM,CAAN;AACD;AACF,GATD;;;;;;;;;;;;;AAqBA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB;AAClB,QAAM,OAAO,GAAG,KAAK,UAAL,CAAhB;;AACA,QAAI;AACF,WAAK,UAAL,IAAmB,IAAnB;AACA,WAAK,iBAAL;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAK,UAAL,IAAmB,OAAnB;AACA,YAAM,CAAN;AACD;AACF,GATD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,YAAP,EAA6B,QAA7B,EAAwE;AAA3C,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAwB,UAAU,CAAC,QAAnC;AAA2C;;AACtE,WAAO,MAAM,CAAC,KAAK,KAAL,EAAD,EAAe,YAAf,EAA6B,QAA7B,CAAb;AACD,GAFD;;;;;;;;AASO,EAAA,UAAA,CAAA,KAAA,GAAP,UAAa,UAAb,EAA+B;AACvB,QAAA,EAAA,GAAA,KAAA,CAAA,UAAA,CAAA;AAAA,QAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,QAAQ,IAAA,GAAA,EAAA,CAAA,IAAR;AAAA,QAAc,KAAA,GAAA,EAAA,CAAA,KAAd;;AACN,WAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,KAArB,EAA4B,IAA5B,CAAP;AACD,GAHM;;;;;;;AASA,EAAA,UAAA,CAAA,GAAA,GAAP,YAAA;AACE,WAAO,IAAI,UAAJ,EAAP;AACD,GAFM;;;;;;;;AASA,EAAA,UAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAAwB;AACtB,WAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD,GAFM;;AAIC,EAAA,UAAA,CAAA,SAAA,CAAC,iBAAD,IAAR,UAA4B,IAA5B,EAAsC;AAC9B,QAAA,EAAA,GAAA,WAAA,CAAA,IAAA,CAAA;AAAA,QAAE,EAAA,GAAA,EAAA,CAAA,EAAF;AAAA,QAAM,EAAA,GAAA,EAAA,CAAA,EAAN;;AACN,SAAK,OAAL,EAAc,EAAd,EAAkB,EAAlB;AACD,GAHO;;AAKA,EAAA,UAAA,CAAA,SAAA,CAAC,OAAD,IAAR,UAAkB,EAAlB,EAAsC,EAAtC,EAAwD;AACtD,SAAK,eAAL,EAAsB,EAAE,CAAC,IAAzB,EAA+B,EAAE,CAAC,KAAlC,EAAyC,EAAE,CAAC,IAA5C,EAAkD,EAAE,CAAC,GAArD;AACA,SAAK,YAAL,IAAqB,IAAI,IAAJ,CAAS,EAAE,CAAC,IAAZ,EAAkB,EAAE,CAAC,KAArB,EAA4B,EAAE,CAAC,IAA/B,CAArB;AACD,GAHO;;AAKA,EAAA,UAAA,CAAA,SAAA,CAAC,iBAAD,IAAR,YAAA;AACQ,QAAA,EAAA,GAAA,WAAA,CAAA;4BAAA;8BAAA;;AAAA,KAAA,CAAA;AAAA,QAAE,EAAA,GAAA,EAAA,CAAA,EAAF;AAAA,QAAM,EAAA,GAAA,EAAA,CAAA,EAAN;;AAKN,SAAK,OAAL,EAAc,EAAd,EAAkB,EAAlB;AACD,GAPO;;AASR,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAL,EAAmB,OAAnB,EAAP;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,MAAL,CAAY,mBAAZ,CAAP;AACD,GAFD;;;;;;AAlYO,EAAA,UAAA,CAAA,QAAA,GAAwB,QAAQ,CAAC,EAAjC;AAqYT,SAAA,UAAA;AA9YA,CAAA,EAAA","sourcesContent":["export enum Language {\n  np = 'np',\n  en = 'en'\n}\nexport interface IYearMonthDate {\n  year: number\n  month: number\n  date: number\n  day?: number\n}\n\nexport interface IAdBs {\n  AD: IYearMonthDate\n  BS: IYearMonthDate\n}\n\n/**\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\n */\nconst yearMonthDaysMapping: number[][] = [\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n  [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]\n]\n\n/**\n * Memoizing the days passed for each month in year for faster calculation\n */\nconst monthDaysMappings: number[][][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  let daySum = 0\n  return yearMappings.map((monthDays: number) => {\n    const monthPassedDays = [monthDays, daySum]\n    daySum += monthDays\n    return monthPassedDays\n  })\n}, [])\n\n/**\n * Ignore\n */\nlet daysPassed = 0\n/**\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\n */\nconst yearDaysMapping: number[][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  const daysInYear = yearMappings.reduce((acc, x) => acc + x, 0)\n  const yearDaysPassed = [daysInYear, daysPassed]\n  daysPassed += daysInYear\n  return yearDaysPassed\n})\n\n/**\n * Max possible Day\n */\nconst MAX_DAY = 33238\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.')\n}\n\n/**\n * Min possible Day\n */\nconst MIN_DAY = 1\n/**\n * @ignore\n */\nexport function getYearIndex(year: number) {\n  return year - EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport function getYearFromIndex(yearIndex: number) {\n  return yearIndex + EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport const KTM_TIMEZONE_OFFSET = 20700000\n/**\n * @ignore\n */\nexport const EPOCH_YEAR = 2000\n/**\n * @ignore\n */\nexport const COMPLETED_DAYS = 1\n/**\n * @ignore\n */\nexport const TOTAL_DAYS = 0\n\n/**\n * @ignore\n */\nfunction mod(m: number, val: number) {\n  while (val < 0) {\n    val += m\n  }\n  return val % m\n}\n/**\n * Format Object\n */\nexport const formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: [\n        'Baisakh',\n        'Jestha',\n        'Asar',\n        'Shrawan',\n        'Bhadra',\n        'Aswin',\n        'Kartik',\n        'Mangsir',\n        'Poush',\n        'Magh',\n        'Falgun',\n        'Chaitra'\n      ]\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: [\n        'बैशाख',\n        'जेठ',\n        'असार',\n        'श्रावण',\n        'भाद्र',\n        'आश्विन',\n        'कार्तिक',\n        'मंसिर',\n        'पौष',\n        'माघ',\n        'फाल्गुण',\n        'चैत्र'\n      ]\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n}\n\n/**\n * Epoch in english date\n */\nconst beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n}\n\n/**\n * `findPassedDays` calculates the days passed from the epoch time.\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param year Year between 2000-2009 of nepali date\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @returns Number of days passed since epoch time from the given date,month and year.\n */\nexport function findPassedDays(year: number, month: number, date: number) {\n  try {\n    const yearIndex = getYearIndex(year)\n    const pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS]\n    const extraMonth = mod(12, month)\n    const extraYear = Math.floor(month / 12)\n\n    const pastMonthDays =\n      yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] -\n      pastYearDays +\n      monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS]\n\n    const daysPassed = pastYearDays + pastMonthDays + date\n    if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n      throw new Error()\n    }\n    return daysPassed\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport { monthDaysMappings, yearDaysMapping }\n\n/**\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param daysPassed The number of days passed since nepali date epoch time\n * @returns date values in object implementing IYearMonthDate interface\n */\nexport function mapDaysToDate(daysPassed: number): IYearMonthDate {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(`The epoch difference is not within the boundaries ${MIN_DAY} - ${MAX_DAY}`)\n  }\n\n  const yearIndex = yearDaysMapping.findIndex(\n    year =>\n      daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS]\n  )\n  const monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS]\n  const monthIndex = monthDaysMappings[yearIndex].findIndex(\n    month =>\n      monthRemainder > month[COMPLETED_DAYS] &&\n      monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS]\n  )\n  const date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS]\n\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  }\n}\n\nexport function findPassedDaysAD(year: number, month: number, date: number) {\n  const timeDiff = Math.abs(\n    Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date)\n  )\n  const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24))\n  return diffDays\n}\n\nexport function mapDaysToDateAD(daysPassed: number) {\n  const mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed))\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  }\n}\n\nexport function convertToAD(bsDateObject: IYearMonthDate): IAdBs {\n  try {\n    const daysPassed = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date)\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport function convertToBS(adDateObject: Date): IAdBs {\n  try {\n    const daysPassed = findPassedDaysAD(\n      adDateObject.getFullYear(),\n      adDateObject.getMonth(),\n      adDateObject.getDate()\n    )\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nfunction mapLanguageNumber(dateNumber: string, language: 'en' | 'np'): string {\n  return dateNumber\n    .split('')\n    .map(num => formatObj[language].date[parseInt(num, 10)])\n    .join('')\n}\n\nexport function format(\n  bsDate: IYearMonthDate,\n  stringFormat: string,\n  language: 'en' | 'np'\n): string {\n  return stringFormat\n    .replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, (match, _, matchedString) => {\n      switch (match) {\n        case 'D':\n          return mapLanguageNumber(bsDate.date.toString(), language)\n        case 'DD':\n          return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language)\n        case 'M':\n          return mapLanguageNumber((bsDate.month + 1).toString(), language)\n        case 'MM':\n          return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language)\n        case 'MMM':\n          return formatObj[language].month.short[bsDate.month]\n        case 'MMMM':\n          return formatObj[language].month.long[bsDate.month]\n        case 'YY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-2), language)\n        case 'YYY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-3), language)\n        case 'YYYY':\n          return mapLanguageNumber(bsDate.year.toString(), language)\n        case 'd':\n          return mapLanguageNumber(bsDate.day?.toString() || '0', language)\n        case 'dd':\n          return formatObj[language].day.short[bsDate.day || 0]\n        case 'ddd':\n          return formatObj[language].day.long[bsDate.day || 0]\n        default:\n          return matchedString.replace('/', '')\n      }\n    })\n    .replace(/\\\\/g, '')\n}\n\nexport function parse(dateString: string): IYearMonthDate {\n  const OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/\n  const GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/\n  let match: RegExpMatchArray | null\n  match = dateString.match(OFFICIAL_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    }\n  }\n  match = dateString.match(GEORGIAN_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    }\n  }\n  throw new Error('Invalid date format')\n}\n","import {\n  convertToAD,\n  convertToBS,\n  IYearMonthDate,\n  IAdBs,\n  format,\n  Language,\n  parse\n} from './nepali-date-helper'\n\nconst dateSymbol = Symbol('Date')\nconst daySymbol = Symbol('Day')\nconst yearSymbol = Symbol('Year')\nconst monthSymbol = Symbol('MonthIndex')\nconst jsDateSymbol = Symbol('JsDate')\nconst convertToBSMethod = Symbol('convertToBS()')\nconst convertToADMethod = Symbol('convertToAD()')\nconst setAdBs = Symbol('setADBS()')\nconst setDayYearMonth = Symbol('setDayYearMonth()')\nexport default class NepaliDate {\n  private [jsDateSymbol]: Date\n  private [yearSymbol]: number\n  private [dateSymbol]: number\n  private [daySymbol]: number\n  private [monthSymbol]: number\n  /**\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\n   */\n  static language: 'np' | 'en' = Language.en\n  /**\n   * **String**\n   *\n   * Provide a valid Nepali date string. The current supported formats are:\n   *\n   * ```\n   * YYYY/MM/DD\n   * YYYY-MM-DD\n   * YYYY MM DD\n   * DD/MM/YYYY\n   * DD-MM-YYYY\n   * DD MM YYYY\n   * ```\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate('2051/02/01') // YYYY/MM/DD\n   * new NepaliDate('2051-02-01')\n   * new NepaliDate('2051 02 01')\n   * new NepaliDate('01/02/2051') // DD/MM/YYYY\n   * new NepaliDate('01-02-2051')\n   * new NepaliDate('01 02 2051')\n   * ```\n   *\n   * **Number**\n   *\n   * The number value represents the UTC timestamp that will be converted to Nepali date.\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(1589638162879)\n   * ```\n   *\n   * **Date**\n   *\n   * Javascript Date object\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(new Date(2020, 10, 10))\n   * ```\n   *\n   * **Empty constructor**\n   *\n   * If no values are provided, the current day date will be converted to Nepali date.\n   *\n   * ```js\n   * new NepaliDate()\n   * ```\n   * @param value\n   */\n  constructor(value?: string | number | Date)\n  /**\n   * This constructor takes year, monthIndex i.e 0-11, and date.\n   *\n   * Example:\n   *\n   * ```js\n   * new Date(2051, 0, 1) // Baisakh 1, 2051\n   * ```\n   * @param year\n   * @param monthIndex\n   * @param date\n   */\n  constructor(year: number, monthIndex: number, date: number)\n  constructor() {\n    const constructorError = new Error('Invalid constructor arguments')\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date())\n    } else if (arguments.length === 1) {\n      const argument = arguments[0]\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument))\n          break\n        case 'string':\n          const { date, year, month } = parse(argument)\n          this[setDayYearMonth](year, month, date)\n          this[convertToADMethod]()\n          break\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument)\n          } else {\n            throw constructorError\n          }\n          break\n        default:\n          throw constructorError\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2])\n      this[convertToADMethod]()\n    } else {\n      throw constructorError\n    }\n  }\n\n  private [setDayYearMonth](year: number, month: number = 0, date: number = 1, day: number = 0) {\n    this[yearSymbol] = year\n    this[monthSymbol] = month\n    this[dateSymbol] = date\n    this[daySymbol] = day\n  }\n\n  /**\n   * Returns Javascript Date converted from nepali date.\n   */\n  toJsDate(): Date {\n    return this[jsDateSymbol]\n  }\n  /**\n   * Get Nepali date for the month\n   */\n  getDate(): number {\n    return this[dateSymbol]\n  }\n  /**\n   * Get Nepali date year.\n   */\n  getYear(): number {\n    return this[yearSymbol]\n  }\n\n  /**\n   * Get Week day index for the date.\n   */\n  getDay(): number {\n    return this[daySymbol]\n  }\n\n  /**\n   * Get Nepali month index.\n   *\n   * ```\n   * Baisakh => 0\n   * Jestha => 1\n   * Asar => 2\n   * Shrawan => 3\n   * Bhadra => 4\n   * Aswin => 5\n   * Kartik => 6\n   * Mangsir => 7\n   * Poush => 8\n   * Magh => 9\n   * Falgun => 10\n   * Chaitra => 11\n   * ```\n   */\n  getMonth(): number {\n    return this[monthSymbol]\n  }\n\n  /**\n   * Returns an object with AD and BS object implementing IYearMonthDate\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *     BS: {\n   *         year: 2052,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *     AD: {\n   *         year: 2019,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *\n   * }\n   * ```\n   */\n  getDateObject(): IAdBs {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    }\n  }\n  /**\n   * Returns Nepali date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2052,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getBS(): IYearMonthDate {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    }\n  }\n  /**\n   * Returns AD date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2019,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getAD(): IYearMonthDate {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    }\n  }\n\n  /**\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\n   * ```\n   * @param date positive or negative integer value to set date\n   */\n  setDate(date: number) {\n    const oldDate = this[dateSymbol]\n    try {\n      this[dateSymbol] = date\n      this[convertToADMethod]()\n    } catch (e) {\n      this[dateSymbol] = oldDate\n      throw e\n    }\n  }\n\n  /**\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\n   * ```\n   * @param date positive or negative integer value to set month\n   */\n  setMonth(month: number) {\n    const oldMonth = this[monthSymbol]\n    try {\n      this[monthSymbol] = month\n      this[convertToADMethod]()\n    } catch (e) {\n      this[monthSymbol] = oldMonth\n      throw e\n    }\n  }\n\n  /**\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\n   * ```\n   * @param date positive integer value to set year\n   */\n  setYear(year: number) {\n    const oldYear = this[yearSymbol]\n    try {\n      this[yearSymbol] = year\n      this[convertToADMethod]()\n    } catch (e) {\n      this[yearSymbol] = oldYear\n      throw e\n    }\n  }\n\n  /**\n   * Format Nepali date string based on format string.\n   * ```\n   * YYYY - 4 digit of year (2077)\n   * YYY  - 3 digit of year (077)\n   * YY   - 2 digit of year (77)\n   * M    - month number (1 - 12)\n   * MM   - month number with 0 padding (01 - 12)\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\n   * D    - Day of Month (1, 2, ... 31, 32)\n   * DD   - Day of Month with zero padding (01, 02, ...)\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\n   * dd   - Week day in short format (Sun, Mon, ..)\n   * ddd  - Week day in long format (Sunday, Monday, ...)\n   * ```\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.format('YYYY/MM/DD') // '2054/11/10'\n   * a.format('YYYY MM DD') // '2054 11 10'\n   * a.format('YYYY') // '2054'\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\n   * a.format('dd', 'np') // 'आइतबार'\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\n   * // Set static variable to 'np' for default Nepali language\n   * NepaliDate.language = 'np'\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\n   * ```\n   * @param formatString\n   * @param language en | np\n   */\n  format(formatString: string, language: 'en' | 'np' = NepaliDate.language): string {\n    return format(this.getBS(), formatString, language)\n  }\n\n  /**\n   * Returns new Nepali Date from the string date format\n   * Similar to calling constructor with string parameter\n   * @param dateString\n   */\n  static parse(dateString: string): NepaliDate {\n    const { date, year, month } = parse(dateString)\n    return new NepaliDate(year, month, date)\n  }\n\n  /**\n   * Returns new Nepali Date converted form current day date.\n   * Similar to calling empty constructor\n   */\n  static now(): NepaliDate {\n    return new NepaliDate()\n  }\n\n  /**\n   * Returns new converted Nepali Date from the provided Javascript Date.\n   * It is similar to passing string as constructor\n   * @param date\n   */\n  static fromAD(date: Date): NepaliDate {\n    return new NepaliDate(date)\n  }\n\n  private [convertToBSMethod](date: Date) {\n    const { AD, BS } = convertToBS(date)\n    this[setAdBs](AD, BS)\n  }\n\n  private [setAdBs](AD: IYearMonthDate, BS: IYearMonthDate) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day)\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date)\n  }\n\n  private [convertToADMethod]() {\n    const { AD, BS } = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    })\n    this[setAdBs](AD, BS)\n  }\n\n  valueOf() {\n    return this[jsDateSymbol].getTime()\n  }\n\n  toString() {\n    return this.format('ddd DD, MMMM YYYY')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}