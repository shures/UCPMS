{"ast":null,"code":"var toDevanagari = require('eurodigit/src/to_non_euro').devanagari;\n\nvar MS_PER_DAY = 86400000;\nvar MONTH_NAMES = ['बैशाख', 'जेठ', 'असार', 'साउन', 'भदौ', 'असोज', 'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत']; // ------ TO UPDATE THESE HARDCODED VALUES USE /scripts/encode-days-in-month.js\n// We have defined our own Epoch for Bikram Sambat: 1970-1-1 BS or 1913-4-13 AD\n\nvar BS_EPOCH_TS = -1789990200000; // = Date.parse('1913-4-13')\n\nvar BS_YEAR_ZERO = 1970;\nvar ENCODED_MONTH_LENGTHS = [5315258, 5314490, 9459438, 8673005, 5315258, 5315066, 9459438, 8673005, 5315258, 5314298, 9459438, 5327594, 5315258, 5314298, 9459438, 5327594, 5315258, 5314286, 9459438, 5315306, 5315258, 5314286, 8673006, 5315306, 5315258, 5265134, 8673006, 5315258, 5315258, 9459438, 8673005, 5315258, 5314298, 9459438, 8673005, 5315258, 5314298, 9459438, 8473322, 5315258, 5314298, 9459438, 5327594, 5315258, 5314298, 9459438, 5327594, 5315258, 5314286, 8673006, 5315306, 5315258, 5265134, 8673006, 5315306, 5315258, 9459438, 8673005, 5315258, 5314490, 9459438, 8673005, 5315258, 5314298, 9459438, 8473325, 5315258, 5314298, 9459438, 5327594, 5315258, 5314298, 9459438, 5327594, 5315258, 5314286, 9459438, 5315306, 5315258, 5265134, 8673006, 5315306, 5315258, 5265134, 8673006, 5315258, 5314490, 9459438, 8673005, 5315258, 5314298, 9459438, 8669933, 5315258, 5314298, 9459438, 8473322, 5315258, 5314298, 9459438, 5327594, 5315258, 5314286, 9459438, 5315306, 5315258, 5265134, 8673006, 5315306, 5315258, 5265134, 5527290, 5527277, 5527226, 5527226, 5528046, 5527277, 5528250, 5528057, 5527277, 5527277]; // TODO ENCODED_MONTH_LENGTHS would be stored more efficiently converted to a string using\n// String.fromCharCode.apply(String, ENCODED_MONTH_LENGTHS), and extracted using\n// ENC_MTH.charCodeAt(...).  However, JS seems to do something weird with the\n// top bits.\n\n/**\n * Magic numbers:\n *   BS_YEAR_ZERO <- the first year (BS) encoded in ENCODED_MONTH_LENGTHS\n *   month #5 <- this is the only month which has a day variation of more than 1\n *   & 3 <- this is a 2 bit mask, i.e. 0...011\n */\n\nfunction daysInMonth(year, month) {\n  if (month < 1 || month > 12) throw new Error('Invalid month value ' + month);\n  var delta = ENCODED_MONTH_LENGTHS[year - BS_YEAR_ZERO];\n  if (typeof delta === 'undefined') throw new Error('No data for year: ' + year + ' BS');\n  return 29 + (delta >>> (month - 1 << 1) & 3);\n}\n\nfunction zPad(x) {\n  return x > 9 ? x : '0' + x;\n}\n\nfunction toBik(greg) {\n  // TODO do not use Date.parse(), as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n  var m,\n      dM,\n      year = BS_YEAR_ZERO,\n      days = Math.floor((Date.parse(greg) - BS_EPOCH_TS) / MS_PER_DAY) + 1;\n\n  while (days > 0) {\n    for (m = 1; m <= 12; ++m) {\n      dM = daysInMonth(year, m);\n      if (days <= dM) return {\n        year: year,\n        month: m,\n        day: days\n      };\n      days -= dM;\n    }\n\n    ++year;\n  }\n\n  throw new Error('Date outside supported range: ' + greg + ' AD');\n}\n\nfunction toDev(year, month, day) {\n  return {\n    day: toDevanagari(day),\n    month: MONTH_NAMES[month - 1],\n    year: toDevanagari(year)\n  };\n}\n\nfunction toBik_euro(greg) {\n  var d = toBik(greg);\n  return d.year + '-' + zPad(d.month) + '-' + zPad(d.day);\n}\n\nfunction toBik_dev(greg) {\n  return toDevanagari(toBik_euro(greg));\n}\n\nfunction toBik_text(greg) {\n  var bik = toBik(greg);\n  var dev = toDev(bik.year, bik.month, bik.day);\n  return dev.day + ' ' + dev.month + ' ' + dev.year;\n}\n\nfunction toGreg(year, month, day) {\n  // TODO month bounds-checking should be handled in daysInMonth()\n  if (month < 1) throw new Error('Invalid month value ' + month);\n  if (year < BS_YEAR_ZERO) throw new Error('Invalid year value ' + year);\n  if (day < 1 || day > daysInMonth(year, month)) throw new Error('Invalid day value', day);\n  var timestamp = BS_EPOCH_TS + MS_PER_DAY * day;\n  month--;\n\n  while (year >= BS_YEAR_ZERO) {\n    while (month > 0) {\n      timestamp += MS_PER_DAY * daysInMonth(year, month);\n      month--;\n    }\n\n    month = 12;\n    year--;\n  }\n\n  var d = new Date(timestamp);\n  return {\n    year: d.getUTCFullYear(),\n    month: 1 + d.getUTCMonth(),\n    day: d.getUTCDate()\n  };\n}\n\nfunction toGreg_text(year, month, day) {\n  var d = toGreg(year, month, day);\n  return d.year + '-' + zPad(d.month) + '-' + zPad(d.day);\n}\n\nmodule.exports = {\n  daysInMonth: daysInMonth,\n  toBik: toBik,\n  toDev: toDev,\n  toBik_dev: toBik_dev,\n  toBik_euro: toBik_euro,\n  toBik_text: toBik_text,\n  toGreg: toGreg,\n  toGreg_text: toGreg_text\n};","map":{"version":3,"sources":["G:/UCPMS/Fontend/app/node_modules/bikram-sambat/src/index.js"],"names":["toDevanagari","require","devanagari","MS_PER_DAY","MONTH_NAMES","BS_EPOCH_TS","BS_YEAR_ZERO","ENCODED_MONTH_LENGTHS","daysInMonth","year","month","Error","delta","zPad","x","toBik","greg","m","dM","days","Math","floor","Date","parse","day","toDev","toBik_euro","d","toBik_dev","toBik_text","bik","dev","toGreg","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","toGreg_text","module","exports"],"mappings":"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","sourcesContent":["var toDevanagari = require('eurodigit/src/to_non_euro').devanagari;\nvar MS_PER_DAY = 86400000;\nvar MONTH_NAMES = ['बैशाख', 'जेठ', 'असार', 'साउन', 'भदौ', 'असोज', 'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत'];\n\n// ------ TO UPDATE THESE HARDCODED VALUES USE /scripts/encode-days-in-month.js\n// We have defined our own Epoch for Bikram Sambat: 1970-1-1 BS or 1913-4-13 AD\nvar BS_EPOCH_TS = -1789990200000; // = Date.parse('1913-4-13')\nvar BS_YEAR_ZERO = 1970;\nvar ENCODED_MONTH_LENGTHS = [\nn];\n\n// TODO ENCODED_MONTH_LENGTHS would be stored more efficiently converted to a string using\n// String.fromCharCode.apply(String, ENCODED_MONTH_LENGTHS), and extracted using\n// ENC_MTH.charCodeAt(...).  However, JS seems to do something weird with the\n// top bits.\n\n/**\n * Magic numbers:\n *   BS_YEAR_ZERO <- the first year (BS) encoded in ENCODED_MONTH_LENGTHS\n *   month #5 <- this is the only month which has a day variation of more than 1\n *   & 3 <- this is a 2 bit mask, i.e. 0...011\n */\nfunction daysInMonth(year, month) {\n  if(month < 1 || month > 12) throw new Error('Invalid month value ' + month);\n  var delta = ENCODED_MONTH_LENGTHS[year - BS_YEAR_ZERO];\n  if(typeof delta === 'undefined') throw new Error('No data for year: ' + year + ' BS');\n  return 29 + ((delta >>>\n      (((month-1) << 1))) & 3);\n}\n\nfunction zPad(x) { return x > 9 ? x : '0' + x; }\n\nfunction toBik(greg) {\n  // TODO do not use Date.parse(), as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n  var m, dM, year = BS_YEAR_ZERO,\n      days = Math.floor((Date.parse(greg) - BS_EPOCH_TS) / MS_PER_DAY) + 1;\n\n  while(days > 0) {\n    for(m=1; m<=12; ++m) {\n      dM = daysInMonth(year, m);\n      if(days <= dM) return { year:year, month:m, day:days };\n      days -= dM;\n    }\n    ++year;\n  }\n\n  throw new Error('Date outside supported range: ' + greg + ' AD');\n}\n\nfunction toDev(year, month, day) {\n  return {\n    day: toDevanagari(day),\n    month: MONTH_NAMES[month-1],\n    year: toDevanagari(year)\n  };\n}\n\nfunction toBik_euro(greg) {\n  var d = toBik(greg);\n  return d.year + '-' + zPad(d.month) + '-' + zPad(d.day);\n}\n\nfunction toBik_dev(greg) {\n  return toDevanagari(toBik_euro(greg));\n}\n\nfunction toBik_text(greg) {\n  var bik = toBik(greg);\n  var dev = toDev(bik.year, bik.month, bik.day);\n  return dev.day + ' ' + dev.month + ' ' + dev.year;\n}\n\nfunction toGreg(year, month, day) {\n  // TODO month bounds-checking should be handled in daysInMonth()\n  if(month < 1) throw new Error('Invalid month value ' + month);\n  if(year < BS_YEAR_ZERO) throw new Error('Invalid year value ' + year);\n  if(day < 1 || day > daysInMonth(year, month)) throw new Error('Invalid day value', day);\n\n  var timestamp = BS_EPOCH_TS + (MS_PER_DAY * day);\n  month--;\n\n  while (year >= BS_YEAR_ZERO) {\n    while (month > 0) {\n      timestamp += (MS_PER_DAY * daysInMonth(year, month));\n      month--;\n    }\n    month = 12;\n    year--;\n  }\n\n  var d = new Date(timestamp);\n  return {\n    year: d.getUTCFullYear(),\n    month: 1+d.getUTCMonth(),\n    day: d.getUTCDate()\n  };\n}\n\nfunction toGreg_text(year, month, day) {\n  var d = toGreg(year, month, day);\n  return d.year + '-' + zPad(d.month) + '-' + zPad(d.day);\n}\n\nmodule.exports = {\n  daysInMonth: daysInMonth,\n  toBik: toBik,\n  toDev: toDev,\n  toBik_dev: toBik_dev,\n  toBik_euro: toBik_euro,\n  toBik_text: toBik_text,\n  toGreg: toGreg,\n  toGreg_text: toGreg_text\n};\n"]},"metadata":{},"sourceType":"script"}