{"ast":null,"code":"import React, { useState } from \"react\";\n\nconst ReactSimpleChart = ({\n  x,\n  yRange = 10,\n  datas\n}) => {\n  const [valueVisible, setValueVisible] = useState(null);\n  let maxValues = 0;\n\n  for (const data of datas) {\n    if (data.value.length !== x.length) throw new Error(\"x length and data value length must be the same.\");\n    maxValues += Math.max(...data.value);\n  }\n\n  const maxValue = maxValues.toString();\n  let maxValueDigits = \"1\";\n\n  for (let i = 0; i < maxValue.length - 1; i++) {\n    maxValueDigits += \"0\";\n  }\n\n  let maxY = parseInt(maxValue) / parseInt(maxValueDigits);\n  if (maxY % 1 === 0) maxY = (maxY + 1) * parseInt(maxValueDigits);else maxY = Math.ceil(maxY) * parseInt(maxValueDigits);\n  const y = [];\n\n  for (let i = 1; i <= yRange; i++) {\n    y.push(maxY / yRange * i);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginBottom: 20\n    }\n  }, datas.map((data, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    style: {\n      display: \"flex\",\n      marginRight: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: data.color,\n      marginRight: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", null, data.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: \"100vh\",\n      display: \"flex\",\n      flex: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\",\n      flex: 0\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      width: \"100%\",\n      paddingTop: 10,\n      position: \"relative\",\n      top: -7\n    }\n  }, \"0\"), y.map((v, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    style: {\n      display: \"flex\",\n      height: `${100 / y.length}%`,\n      borderRight: \"1px solid #000\",\n      width: \"100%\",\n      marginRight: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"relative\",\n      top: -8\n    }\n  }, v)))), x.map((v, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-end\",\n      alignItems: \"center\",\n      width: `${100 / x.length}%`\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\",\n      justifyContent: \"flex-start\",\n      width: \"100%\",\n      flex: 1,\n      position: \"relative\"\n    },\n    onMouseOver: () => setValueVisible(index),\n    onMouseLeave: () => setValueVisible(null)\n  }, y.map((v, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    style: {\n      display: \"flex\",\n      alignItems: \"flex-end\",\n      height: `${100 / y.length}%`,\n      borderTop: \"1px solid #ababab\"\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\",\n      position: \"absolute\",\n      height: \"100%\",\n      width: \"50%\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\"\n    }\n  }, datas.map((data, dataIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: dataIndex,\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      background: data.color,\n      height: `${data.value[index] / maxY * 100}%`\n    }\n  }, valueVisible === index && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"#fff\"\n    }\n  }, data.value[index]))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      borderTop: \"1px solid #000\",\n      width: \"100%\",\n      textAlign: \"center\",\n      paddingTop: 10\n    }\n  }, v)))));\n};\n\nexport default ReactSimpleChart;","map":{"version":3,"sources":["../../src/index.tsx"],"names":["ReactSimpleChart","yRange","datas","useState","maxValues","data","x","Math","maxValue","maxValueDigits","i","maxY","parseInt","y","display","flexWrap","marginBottom","marginRight","width","height","backgroundColor","minHeight","flex","flexDirection","paddingTop","position","top","length","borderRight","justifyContent","alignItems","setValueVisible","borderTop","left","transform","background","valueVisible","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst ReactSimpleChart: React.FC<{\n  x: any[];\n  yRange?: number;\n  datas: { label: string; value: number[]; color: string }[];\n}> = ({ x, yRange = 10, datas }) => {\n  const [valueVisible, setValueVisible] = useState<number | null>(null);\n\n  let maxValues = 0;\n  for (const data of datas) {\n    if (data.value.length !== x.length)\n      throw new Error(\"x length and data value length must be the same.\");\n    maxValues += Math.max(...data.value);\n  }\n  const maxValue = maxValues.toString();\n  let maxValueDigits = \"1\";\n  for (let i = 0; i < maxValue.length - 1; i++) {\n    maxValueDigits += \"0\";\n  }\n\n  let maxY = parseInt(maxValue) / parseInt(maxValueDigits);\n\n  if (maxY % 1 === 0) maxY = (maxY + 1) * parseInt(maxValueDigits);\n  else maxY = Math.ceil(maxY) * parseInt(maxValueDigits);\n\n  const y: number[] = [];\n  for (let i = 1; i <= yRange; i++) {\n    y.push((maxY / yRange) * i);\n  }\n\n  return (\n    <>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\", marginBottom: 20 }}>\n        {datas.map((data, index) => (\n          <div key={index} style={{ display: \"flex\", marginRight: 10 }}>\n            <div\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: data.color,\n                marginRight: 10,\n              }}\n            />\n            <span>{data.label}</span>\n          </div>\n        ))}\n      </div>\n      <div style={{ minHeight: \"100vh\", display: \"flex\", flex: 1 }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n            flex: 0,\n          }}\n        >\n          <span\n            style={{\n              width: \"100%\",\n              paddingTop: 10,\n              position: \"relative\",\n              top: -7,\n            }}\n          >\n            0\n          </span>\n          {y.map((v, i) => (\n            <span\n              key={i}\n              style={{\n                display: \"flex\",\n                height: `${100 / y.length}%`,\n                borderRight: \"1px solid #000\",\n                width: \"100%\",\n                marginRight: 10,\n              }}\n            >\n              <span style={{ position: \"relative\", top: -8 }}>{v}</span>\n            </span>\n          ))}\n        </div>\n        {x.map((v, index) => (\n          <div\n            key={index}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"flex-end\",\n              alignItems: \"center\",\n              width: `${100 / x.length}%`,\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column-reverse\",\n                justifyContent: \"flex-start\",\n                width: \"100%\",\n                flex: 1,\n                position: \"relative\",\n              }}\n              onMouseOver={() => setValueVisible(index)}\n              onMouseLeave={() => setValueVisible(null)}\n            >\n              {y.map((v, i) => (\n                <div\n                  key={i}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"flex-end\",\n                    height: `${100 / y.length}%`,\n                    borderTop: \"1px solid #ababab\",\n                  }}\n                />\n              ))}\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column-reverse\",\n                  position: \"absolute\",\n                  height: \"100%\",\n                  width: \"50%\",\n                  left: \"50%\",\n                  transform: \"translateX(-50%)\",\n                }}\n              >\n                {datas.map((data, dataIndex) => (\n                  <div\n                    key={dataIndex}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      background: data.color,\n                      height: `${(data.value[index] / maxY) * 100}%`,\n                    }}\n                  >\n                    {valueVisible === index && (\n                      <div\n                        style={{\n                          color: \"#fff\",\n                        }}\n                      >\n                        {data.value[index]}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div\n              style={{\n                borderTop: \"1px solid #000\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10,\n              }}\n            >\n              {v}\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default ReactSimpleChart;\n"]},"metadata":{},"sourceType":"module"}