{"ast":null,"code":"var NepaliNumber = function () {\n  function NepaliNumber(numberString) {\n    this.outputLocale = \"en\";\n    this.numberString = \"\";\n    this.supportedLocale = [\"en\", \"ne\"];\n    this.supportedNumberType = [\"en-IN\", \"en-US\"];\n    this.digitMapping = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"];\n\n    if (numberString) {\n      this.setNumber(numberString);\n    }\n  }\n\n  NepaliNumber.prototype.setOutputLocale = function (locale) {\n    if (!this.supportedLocale.includes(locale)) {\n      throw new TypeError(\"Currently 'ne' and 'en' only supported as a `locale` parameter.\");\n    }\n\n    this.outputLocale = locale;\n    return this;\n  };\n\n  NepaliNumber.prototype.setNumber = function (numberString) {\n    this.numberString = \"\" + numberString;\n    return this;\n  };\n\n  NepaliNumber.prototype.toNepali = function (numberString) {\n    var _this = this;\n\n    numberString = numberString || this.numberString;\n\n    if (!numberString) {\n      return \"\";\n    }\n\n    return numberString.toString().split(\"\").map(function (char) {\n      // tslint:disable-next-line:radix\n      if (isNaN(parseInt(char))) {\n        return char;\n      }\n\n      return _this.digitMapping[char] || char;\n    }).join(\"\");\n  };\n\n  NepaliNumber.prototype.toEnglish = function (numberString) {\n    var _this = this;\n\n    numberString = numberString || this.numberString;\n\n    if (!numberString) {\n      return \"\";\n    }\n\n    return numberString.toString().split(\"\").map(function (char) {\n      var englishDigit = _this.digitMapping.findIndex(function (digit) {\n        return digit === char;\n      });\n\n      return englishDigit === -1 ? char : \"\" + englishDigit;\n    }).join(\"\");\n  };\n\n  NepaliNumber.prototype.formatNumber = function (type) {\n    if (!this.supportedNumberType.includes(type)) {\n      throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\");\n    } // tslint:disable-next-line:radix\n\n\n    var englishNumber = parseFloat(this.toEnglish());\n\n    if (isNaN(englishNumber)) {\n      return this.numberString;\n    }\n\n    var formatted = new Intl.NumberFormat(type).format(englishNumber);\n    return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted);\n  };\n\n  NepaliNumber.prototype.formatAmount = function (type, precision) {\n    if (precision === void 0) {\n      precision = 2;\n    }\n\n    if (!this.supportedNumberType.includes(type)) {\n      throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\");\n    } // tslint:disable-next-line:radix\n\n\n    var englishAmount = parseFloat(this.toEnglish());\n\n    if (isNaN(englishAmount)) {\n      return this.numberString;\n    }\n\n    var formatted = new Intl.NumberFormat(type, {\n      maximumFractionDigits: precision,\n      minimumFractionDigits: precision\n    }).format(englishAmount);\n    return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted);\n  };\n\n  return NepaliNumber;\n}();\n\nvar englishToNepaliNumber = function (numberString) {\n  return new NepaliNumber().setNumber(numberString).toNepali();\n};\n\nvar nepaliToEnglishNumber = function (numberString) {\n  return new NepaliNumber().setNumber(numberString).toEnglish();\n};\n\nvar nepaliNumberFormat = function (numberString, locale) {\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatNumber(\"en-IN\");\n};\n\nvar englishNumberFormat = function (numberString, locale) {\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatNumber(\"en-US\");\n};\n\nvar nepaliAmountFormat = function (numberString, precision, locale) {\n  if (precision === void 0) {\n    precision = 2;\n  }\n\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatAmount(\"en-IN\", precision);\n};\n\nvar englishAmountFormat = function (numberString, precision, locale) {\n  if (precision === void 0) {\n    precision = 2;\n  }\n\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatAmount(\"en-US\", precision);\n};\n\nexport { englishAmountFormat, englishNumberFormat, englishToNepaliNumber, nepaliAmountFormat, nepaliNumberFormat, nepaliToEnglishNumber };","map":{"version":3,"sources":["../src/NepaliNumber.ts","../src/NepaliNumberHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["class NepaliNumber {\n    private outputLocale: string = \"en\"\n    private numberString: string = \"\"\n    private supportedLocale: string[] = [\"en\", \"ne\"]\n    private supportedNumberType: string[] = [\"en-IN\", \"en-US\"]\n    private digitMapping: string[] = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"]\n\n    constructor(numberString?: number) {\n        if (numberString) {\n            this.setNumber(numberString)\n        }\n    }\n\n    public setOutputLocale(locale: string): NepaliNumber {\n        if (!this.supportedLocale.includes(locale)) {\n            throw new TypeError(\"Currently 'ne' and 'en' only supported as a `locale` parameter.\")\n        }\n\n        this.outputLocale = locale\n\n        return this\n    }\n\n    public setNumber(numberString: string | number): NepaliNumber {\n        this.numberString = `${numberString}`\n\n        return this\n    }\n\n    public toNepali(numberString?: string | number): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                // tslint:disable-next-line:radix\n                if (isNaN(parseInt(char))) {\n                    return char\n                }\n\n                return this.digitMapping[char] || char\n            })\n            .join(\"\")\n    }\n\n    public toEnglish(numberString?: string): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                const englishDigit = this.digitMapping.findIndex((digit): boolean => digit === char)\n\n                return englishDigit === -1 ? char : `${englishDigit}`\n            })\n            .join(\"\")\n    }\n\n    public formatNumber(type: string): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishNumber = parseFloat(this.toEnglish())\n        if (isNaN(englishNumber)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type).format(englishNumber)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n\n    public formatAmount(type: string, precision: number = 2): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishAmount = parseFloat(this.toEnglish())\n        if (isNaN(englishAmount)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type, {\n            maximumFractionDigits: precision,\n            minimumFractionDigits: precision,\n        }).format(englishAmount)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n}\n\nexport default NepaliNumber\n","import NepaliNumber from \"./NepaliNumber\"\n\nexport const englishToNepaliNumber = (numberString: string | number): string =>\n    new NepaliNumber().setNumber(numberString).toNepali()\n\nexport const nepaliToEnglishNumber = (numberString: string): string =>\n    new NepaliNumber().setNumber(numberString).toEnglish()\n\nexport const nepaliNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-IN\")\nexport const englishNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-US\")\n\nexport const nepaliAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-IN\", precision)\nexport const englishAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-US\", precision)\n"]},"metadata":{},"sourceType":"module"}