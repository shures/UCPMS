{"version":3,"file":"index.js","sources":["../src/Config.ts","../src/Validator.ts","../src/BikramSambat.ts","../src/Helper.ts"],"sourcesContent":["interface BikramSambatConfig {\n    minBSYear: number\n    maxBSYear: number\n\n    bsMonthTotalDaysCount: number[][]\n    monthReferences: number[][]\n    referenceDate: {\n        AD: string\n        BS: string\n    }\n\n    outputSeparator: string\n}\n\nconst Config: BikramSambatConfig = {\n    maxBSYear: 2100,\n    minBSYear: 1970,\n\n    outputSeparator: \"-\",\n\n    bsMonthTotalDaysCount: [\n        [30, 31],\n        [31, 32],\n        [31, 32],\n        [31, 32],\n        [31, 32],\n        [30, 31],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [30, 31],\n    ],\n\n    monthReferences: [\n        [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],\n        [\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            1,\n            2,\n        ],\n        [\n            0,\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            1,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            1,\n            2,\n        ],\n        [\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            2,\n        ],\n        [59, 1, 26, 1, 28, 1, 2, 1, 12],\n        [\n            0,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            5,\n            1,\n            1,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            1,\n            2,\n        ],\n        [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],\n        [\n            1,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            1,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            15,\n            2,\n            4,\n        ],\n        [\n            0,\n            1,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            15,\n            2,\n            4,\n        ],\n        [\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            1,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            18,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            15,\n            1,\n            2,\n            1,\n            1,\n        ],\n        [\n            0,\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            3,\n            1,\n            3,\n            1,\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            20,\n            1,\n            1,\n            1,\n        ],\n        [\n            1,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            20,\n            3,\n        ],\n    ],\n\n    referenceDate: {\n        AD: \"1913-03-13\",\n        BS: \"1970-01-01\",\n    },\n}\n\nexport default Config\n","import Config from \"./Config\"\n\nexport default class Validator {\n    public static dateType(type: string): boolean {\n        if (![\"BS\", \"AD\"].includes(type)) {\n            throw new TypeError(\"Invalid date type. Only 'AD' or 'BS' type supported.\")\n        }\n\n        return true\n    }\n\n    public static adYear(year: number) {\n        const minAdYear = Config.minBSYear - 57\n        const maxAdYear = Config.maxBSYear - 57\n\n        if (year < minAdYear || year > maxAdYear) {\n            throw new RangeError(`AD year should be in range of ${minAdYear} to ${maxAdYear}`)\n        }\n    }\n\n    public static adMonth(month: number) {\n        if (month < 1 || month > 12) {\n            throw new RangeError(\"AD month should be in range of 1 to 12\")\n        }\n    }\n\n    public static adDay(day: number) {\n        if (day < 1 || day > 31) {\n            throw new RangeError(\"AD day should be in range of 1 to 31\")\n        }\n    }\n\n    public static bsYear(year: number) {\n        const midBsYear = Config.minBSYear\n        const maxBsYear = Config.maxBSYear\n\n        if (year < midBsYear || year > maxBsYear) {\n            throw new RangeError(`BS year should be in range of ${midBsYear} to ${maxBsYear}`)\n        }\n    }\n\n    public static bsMonth(month: number) {\n        if (month < 1 || month > 12) {\n            throw new RangeError(\"BS month should be in range of 1 to 12\")\n        }\n    }\n\n    public static bsDay(day: number) {\n        if (day < 1 || day > 32) {\n            throw new RangeError(\"BS day should be in range of 1 to 32\")\n        }\n    }\n}\n","import Config from \"./Config\"\nimport Validator from \"./Validator\"\n\ninterface DateObject {\n    year: number\n    month: number\n    day: number\n}\n\nexport default class BikramSambat {\n    private dateType: string = \"AD\"\n    private date: DateObject = { year: 0, month: 0, day: 0 }\n\n    constructor(date?: Date | string, type: string = \"AD\") {\n        if (date) {\n            this.setDate(date, type)\n        } else {\n            this.setDate(new Date())\n        }\n    }\n\n    public setDate(date: Date | string, type: string = \"AD\"): BikramSambat {\n        Validator.dateType(type)\n        if (type === \"BS\") {\n            if (typeof date !== \"string\") {\n                throw new TypeError(\"BS date should be 'string' type.\")\n            }\n\n            this.dateType = \"BS\"\n            this.date = this.splitBsDate(date)\n\n            return this\n        }\n\n        this.dateType = \"AD\"\n        this.date = this.splitAdDate(date)\n\n        return this\n    }\n\n    public toAD(): string {\n        if (this.dateType === \"AD\") {\n            return this.format(this.date)\n        }\n\n        const totalDaysSince = this.totalDaysSince()\n\n        const { year, month, day } = this.splitDate(Config.referenceDate.AD)\n        const adDate = new Date(year, month, day - 1)\n        adDate.setDate(adDate.getDate() + totalDaysSince)\n\n        return this.format(this.splitAdDate(adDate))\n    }\n\n    public toBS(): string {\n        if (this.dateType === \"BS\") {\n            return this.format(this.date)\n        }\n\n        const { year: adYear, month: adMonth, day: adDay } = this.date\n        let bsYear = adYear + 57\n        let bsMonth = (adMonth + 9) % 12 || 12\n        let bsDay = 1\n\n        if (adMonth < 4) {\n            bsYear -= 1\n        } else if (adMonth === 4) {\n            const bsNewYearAdDate = new BikramSambat(this.format({ year: bsYear, month: 1, day: 1 }), \"BS\").toAD()\n            if (adDay < new Date(bsNewYearAdDate).getDate()) {\n                bsYear -= 1\n            }\n        }\n\n        const bsFirstDayOfMonthAdDate = new Date(\n            new BikramSambat(this.format({ year: bsYear, month: bsMonth, day: 1 }), \"BS\").toAD(),\n        )\n        if (adDay >= 1 && adDay < bsFirstDayOfMonthAdDate.getDate()) {\n            bsMonth = bsMonth !== 1 ? bsMonth - 1 : 12\n            const daysInBSMonth = this.daysInBsMonth(bsYear, bsMonth)\n            bsDay = daysInBSMonth - (bsFirstDayOfMonthAdDate.getDate() - adDay) + 1\n        } else {\n            bsDay = adDay - bsFirstDayOfMonthAdDate.getDate() + 1\n        }\n\n        return this.format({ year: bsYear, month: bsMonth, day: bsDay })\n    }\n\n    /**\n     * Calculate total number of days since minimum reference date\n     */\n    private totalDaysSince(): number {\n        const { year: bsYear, month: bsMonth, day: bsDay } = this.date\n\n        let totalDays = 0\n        const diffInYears = bsYear - Config.minBSYear\n        for (let i = 1; i <= 12; i++) {\n            totalDays += this.totalMonthDaysSince(i, i < bsMonth ? diffInYears + 1 : diffInYears)\n        }\n\n        if (bsYear > 2085 && bsYear < 2088) {\n            totalDays += bsDay - 2\n        } else if (bsYear === 2085 && bsMonth > 5) {\n            totalDays += bsDay - 2\n        } else if (bsYear > 2088) {\n            totalDays += bsDay - 4\n        } else if (bsYear === 2088 && bsMonth > 5) {\n            totalDays += bsDay - 4\n        } else {\n            totalDays += bsDay\n        }\n\n        return totalDays\n    }\n\n    /**\n     * Total number of bsMonth days since minimum reference date\n     * @param bsMonth\n     * @param diffInYear\n     */\n    private totalMonthDaysSince(bsMonth: number, diffInYear: number): number {\n        if (diffInYear === 0) {\n            return 0\n        }\n\n        const monthData = Config.monthReferences[bsMonth - 1]\n\n        interface Total {\n            month: number\n            year: number\n        }\n\n        const calculated = monthData.slice(0).reduce(\n            (total: Total, monthDataItem: number, monthIndex, arr: number[]): Total => {\n                if (monthDataItem === 0) {\n                    return total\n                }\n\n                const monthTotalDaysCountIndex = monthIndex % 2\n                if (diffInYear > total.year + monthDataItem) {\n                    total.year += monthDataItem\n                    total.month += Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * monthDataItem\n                } else {\n                    total.month +=\n                        Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * (diffInYear - total.year)\n                    total.year = diffInYear - total.year\n                    arr.splice(1) // break; dont forget slice(0) before reducing https://stackoverflow.com/questions/36144406/how-to-break-on-reduce-method\n                }\n\n                return total\n            },\n            { month: 0, year: 0 },\n        )\n\n        return calculated.month\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * Returns total number of days in bsMonth for bsYear\n     * @param bsYear\n     * @param bsMonth\n     */\n    private daysInBsMonth(bsYear: number, bsMonth: number): number {\n        const totalYears = bsYear + 1 - Config.minBSYear\n        const monthData = Config.monthReferences[bsMonth - 1]\n\n        let yearCount = 0\n        for (let i = 0; i < monthData.length; i++) {\n            if (monthData[i] === 0) {\n                continue\n            }\n\n            const monthTotalDaysCountIndex = i % 2\n            yearCount += monthData[i]\n            if (totalYears <= yearCount) {\n                if ((bsYear === 2085 && bsMonth === 5) || (bsYear === 2088 && bsMonth === 5)) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] - 2\n                } else {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex]\n                }\n            }\n        }\n\n        return 0\n    }\n\n    private splitDate(date: string): DateObject {\n        // tslint:disable-next-line:radix\n        const [year, month, day]: number[] = date\n            .replace(/\\//g, \"-\")\n            .split(\"-\")\n            .map(d => Math.floor(Number(d)))\n\n        return { year, month, day }\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private splitAdDate(date: Date | string): DateObject {\n        if (typeof date === \"string\") {\n            date = new Date(date)\n        }\n\n        const year: number = date.getFullYear()\n        const month: number = date.getMonth() + 1\n        const day: number = date.getDate()\n\n        Validator.adYear(year)\n        Validator.adMonth(month)\n        Validator.adDay(day)\n\n        return { year, month, day }\n    }\n\n    private splitBsDate(date: string): DateObject {\n        const { year, month, day } = this.splitDate(date)\n\n        Validator.bsYear(year)\n        Validator.bsMonth(month)\n        Validator.bsDay(day)\n\n        return { year, month, day }\n    }\n\n    private format(date: DateObject): string {\n        const separator: string = Config.outputSeparator\n        const { year, month, day } = date\n\n        return `${year}${separator}${this.zeroPad(month)}${separator}${this.zeroPad(day)}`\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private zeroPad(x: number): string {\n        return x > 9 ? `${x}` : `0${x}`\n    }\n}\n","import BikramSambat from \"./BikramSambat\"\n\nexport const BSToAD = (date: string): string => {\n    return new BikramSambat().setDate(date, \"BS\").toAD()\n}\n\nexport const ADToBS = (date: Date | string): string => {\n    return new BikramSambat().setDate(date, \"AD\").toBS()\n}\n"],"names":[],"mappings":";;;;AAcA,IAAM,MAAM,GAAuB;IAC/B,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IAEf,eAAe,EAAE,GAAG;IAEpB,qBAAqB,EAAE;QACnB,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;QACR,CAAC,EAAE,EAAE,EAAE,CAAC;KACX;IAED,eAAe,EAAE;QACb,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvG;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACJ;QACD;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACJ;QACD;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACJ;QACD,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACJ;QACD,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAC/F;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;SACJ;QACD;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;SACJ;QACD;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACJ;QACD;YACI,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,EAAE;YACF,CAAC;YACD,CA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"}